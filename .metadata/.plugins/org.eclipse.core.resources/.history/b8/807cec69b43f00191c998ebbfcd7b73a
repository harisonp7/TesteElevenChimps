package com.eleven.chimps.teste.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;

import com.eleven.chimps.teste.domain.Promocao;
import com.eleven.chimps.teste.domain.SkuPromocao;
import com.eleven.chimps.teste.dto.PromocaoDTO;
import com.eleven.chimps.teste.repositories.ProdutoRepository;
import com.eleven.chimps.teste.repositories.PromocaoRepository;
import com.eleven.chimps.teste.repositories.SkuPromocaoRepository;
import com.eleven.chimps.teste.services.exceptions.DataIntegrityException;
import com.eleven.chimps.teste.services.exceptions.ObjectNotFoundException;

@Service
public class PromocaoService {
	
	@Autowired
	private PromocaoRepository repo;
	
	@Autowired
	private SkuPromocaoService serviceSku;
	
	
	@Autowired
	private SkuPromocaoRepository repoSku;
	
	public Promocao find(Integer id) {
		Optional<Promocao> obj = repo.findById(id);
		
		return obj.orElseThrow(() -> new ObjectNotFoundException(
				String.format("Promoção não encontrada! Id: %1$s Tipo: %2$s", id, Promocao.class.getName())
			));
	}
	
	public List<Promocao> findAll() {
		return repo.findAll();
	}
	
	public Page<Promocao> findPage(Integer page, Integer linesPerPage, String orderBy, String direction){
		PageRequest pageRequest = PageRequest.of(page, linesPerPage, Direction.valueOf(direction),orderBy);
		return repo.findAll(pageRequest);
	}

//	public PromocaoDTO insert(Promocao obj) {
//		obj.setId(null);
//		return repo.save(obj);
//	}
	@Transactional
	public void insertProSku(PromocaoDTO obj) {
		
		List<SkuPromocao> listSkuPromocao = new ArrayList<>();
		
		Promocao objProm = new Promocao(null,obj.getNome(),obj.getPercentual());
		
		for(SkuPromocao item : obj.getSkuPromocoes())
		{
			SkuPromocao objSku = new SkuPromocao(null, item.getSku());
			listSkuPromocao.add(objSku);
			objProm.getSkuPromocoes().addAll(Arrays.asList(objSku));
		}
		repo.saveAll(Arrays.asList(objProm));
		serviceSku.InsertSku(listSkuPromocao, objProm);
		
		for(SkuPromocao item : listSkuPromocao)
		{
			item.getPromocoes().addAll(Arrays.asList(objProm));
			reposku.saveAll(Arrays.asList(item));
		}

	}

//	private void InsertSku(List<SkuPromocao> listSkuPromocao, Promocao objProm) {
//		for(SkuPromocao item : listSkuPromocao)
//		{
//			item.getPromocoes().addAll(Arrays.asList(objProm));
//			skuPromRepo.saveAll(Arrays.asList(item));
//		}
//	}
	
	
	
	public Promocao update(Promocao obj) {
		Promocao newObj = this.find(obj.getId());
		updateData(newObj, obj);
		return repo.save(newObj);
	}
	
	public void delete(Integer id) {
		this.find(id);
		try {
			repo.deleteById(id);
		}
		catch(DataIntegrityViolationException e) {
			throw new DataIntegrityException("Não é possível excluir promoções com vínculos com SKUs, somente atualizar!");
		}
	}
	public Promocao fromDTO(PromocaoDTO objDto)
	{
		return new Promocao(objDto.getId(), objDto.getNome(), objDto.getPercentual());
	}
	private void updateData(Promocao newObj, Promocao obj) {
		newObj.setNome(obj.getNome());
		newObj.setPercentual(obj.getPercentual());
	}
}
